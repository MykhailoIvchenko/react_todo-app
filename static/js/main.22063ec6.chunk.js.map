{"version":3,"sources":["enums/enums.ts","components/NewTodoForm/NewTodoForm.tsx","components/TodoItem/TodoItem.tsx","components/TodoList/TodoList.tsx","components/TodosCounter/TodosCounter.tsx","components/TodosFilter/TodosFilter.tsx","components/ClearCompletedButton/ClearCompletedButton.tsx","components/ToggleAll/Toggle.tsx","api.ts","TodoApp.tsx","index.tsx"],"names":["Filters","NewTodoForm","handleSubmit","useState","newTodoTitle","setNewTodoTitle","onSubmit","event","value","type","className","placeholder","onChange","target","TodoItem","todo","index","editTodoTitle","editCompletedStatus","isEditingMode","setIsEditingMode","title","editedTodoTitle","setEditedTodoTitle","initialEditingValue","setInitialEditingValue","editingInput","useRef","liClasses","classNames","completed","editing","checkboxIds","id","checked","htmlFor","onClick","preventDefault","onDoubleClick","setTimeout","current","focus","ref","onKeyDown","key","editTodoValue","onBlur","TodoList","items","map","item","TodosCounter","numberOfActiveTodos","todos","filter","length","TodosFilter","applyFilter","All","selectedFilter","setSelectedFilter","handleFilterChange","appliedFilter","href","Active","Completed","ClearCompletedButton","completedTodosLength","handleClearCompletedClick","clearButtonClasses","hidden","ToggleAll","toggleAllStatus","handleToggleAllClick","BASE_URL","request","url","options","a","fetch","response","ok","Error","status","statusText","json","getUser","userId","getUserTodos","userTodos","addNewTodo","method","headers","body","JSON","stringify","addResult","changeTodo","todoId","changingFieldName","newValue","editResult","deleteTodo","deleteResult","TodoApp","setTodos","setToggleAllStatus","currentFilter","setCurrentFilter","user","setUser","isErrorOccured","setIsErrorOccured","mainClasses","footerClasses","errorClasses","getUserName","userFS","name","getTodosFromServer","todosFS","handleChangeRequest","changingField","result","handleDeleteRequest","newStatus","toString","find","activePromises","Promise","all","promise","completedPromises","prev","handleFormSubmit","deleteCompletedTodos","completedTodos","completedTodosPromises","newTitle","useEffect","Toggle","getVisibleTodos","chosenFilter","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.22063ec6.chunk.js","sourcesContent":["enum Filters {\n  All = 'all',\n  Active = 'active',\n  Completed = 'completed',\n}\n\nexport default Filters;\n","import React, { useState } from 'react';\n\nconst NewTodoForm: React.FC<NewTodoFormProps> = ({ handleSubmit }) => {\n  const [newTodoTitle, setNewTodoTitle] = useState('');\n\n  const createTodo = (event: React.FormEvent<HTMLFormElement>) => {\n    handleSubmit(event, newTodoTitle);\n    setNewTodoTitle('');\n  };\n\n  return (\n    <form\n      onSubmit={createTodo}\n    >\n      <input\n        value={newTodoTitle}\n        type=\"text\"\n        className=\"new-todo\"\n        placeholder=\"What needs to be done?\"\n        onChange={(event) => setNewTodoTitle(event.target.value)}\n      />\n    </form>\n  );\n};\n\nexport default NewTodoForm;\n","/* eslint-disable jsx-a11y/no-noninteractive-element-interactions */\n/* eslint-disable jsx-a11y/click-events-have-key-events */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useState, useRef } from 'react';\nimport classNames from 'classnames';\n\nconst TodoItem: React.FC<TodoItemProps> = ({\n  todo, index, editTodoTitle, editCompletedStatus,\n}) => {\n  const [isEditingMode, setIsEditingMode] = useState(false);\n  const [editedTodoTitle, setEditedTodoTitle] = useState(todo.title);\n  const [\n    initialEditingValue,\n    setInitialEditingValue,\n  ] = useState(editedTodoTitle);\n  const editingInput = useRef<HTMLInputElement>(null);\n\n  const liClasses = classNames({\n    completed: todo.completed && !isEditingMode,\n    editing: isEditingMode,\n  });\n\n  const checkboxIds = classNames({\n    [`toggle-view${index}`]: !todo.completed && !isEditingMode,\n    'toggle-completed': todo.completed && !isEditingMode,\n    'toggle-editing': isEditingMode,\n  });\n\n  const editTodoValue = (event: React.KeyboardEvent<HTMLInputElement>) => {\n    if (event.key === 'Escape') {\n      setIsEditingMode(false);\n      setEditedTodoTitle(todo.title);\n\n      return;\n    }\n\n    if (event.key === 'Enter') {\n      if (initialEditingValue !== editedTodoTitle) {\n        setInitialEditingValue(editedTodoTitle);\n        editTodoTitle(editedTodoTitle, todo.id);\n      }\n\n      setIsEditingMode(false);\n    }\n  };\n\n  const handleTodoDoubleClick = () => {\n    setIsEditingMode(true);\n    setInitialEditingValue(editedTodoTitle);\n    setTimeout(() => {\n      editingInput.current?.focus();\n    }, 0);\n  };\n\n  const handleOnBlur = () => {\n    if (initialEditingValue !== editedTodoTitle) {\n      editTodoTitle(editedTodoTitle, todo.id);\n    }\n\n    setIsEditingMode(false);\n  };\n\n  return (\n    <li className={liClasses}>\n      <div className=\"view\">\n        <input\n          type=\"checkbox\"\n          className=\"toggle\"\n          id={checkboxIds}\n          onChange={() => editCompletedStatus(!todo.completed, todo.id)}\n          checked={todo.completed}\n        />\n        <label\n          htmlFor={checkboxIds}\n          onClick={(event) => event.preventDefault()}\n          onDoubleClick={handleTodoDoubleClick}\n        >\n          {todo.title}\n        </label>\n        <button\n          type=\"button\"\n          data-cy=\"deleteTodo\"\n          className=\"destroy\"\n          onClick={() => editTodoTitle('', todo.id)}\n        />\n      </div>\n      <input\n        value={editedTodoTitle}\n        ref={editingInput}\n        type=\"text\"\n        className=\"edit\"\n        onChange={(event) => setEditedTodoTitle(event.target.value)}\n        onKeyDown={(event) => editTodoValue(event)}\n        onBlur={handleOnBlur}\n      />\n    </li>\n  );\n};\n\nexport default TodoItem;\n","// import React from 'react';\n\nimport TodoItem from '../TodoItem/TodoItem';\n\nconst TodoList: React.FC<TodoListProps> = ({\n  items, editTodoTitle, editCompletedStatus,\n}) => {\n  return (\n    <ul className=\"todo-list\">\n      {\n        items.map((item, index) => (\n          <TodoItem\n            key={item.id}\n            todo={item}\n            index={index}\n            editTodoTitle={editTodoTitle}\n            editCompletedStatus={editCompletedStatus}\n          />\n        ))\n      }\n    </ul>\n  );\n};\n\nexport default TodoList;\n","import React from 'react';\n\nconst TodosCounter: React.FC<TodosCounterProps> = ({ todos }) => {\n  const numberOfActiveTodos = todos\n    .filter(todo => todo.completed === false).length;\n\n  return (\n    <span data-cy=\"todosCounter\" className=\"todo-count\">\n      {`${numberOfActiveTodos} ${numberOfActiveTodos === 1 ? 'item' : 'items'} left`}\n    </span>\n\n  );\n};\n\nexport default TodosCounter;\n","import React, { useState } from 'react';\nimport Filters from '../../enums/enums';\n\nconst TodosFilter: React.FC<TodosFilterProps> = ({ applyFilter }) => {\n  const [selectedFilter, setSelectedFilter] = useState(Filters.All);\n\n  const handleFilterChange = (appliedFilter: Filters) => {\n    setSelectedFilter(appliedFilter);\n    applyFilter(appliedFilter);\n  };\n\n  return (\n    <ul className=\"filters\">\n      <li>\n        <a\n          href=\"#/\"\n          className={selectedFilter === Filters.All ? 'selected' : ''}\n          onClick={() => handleFilterChange(Filters.All)}\n        >\n          All\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/active\"\n          className={selectedFilter === Filters.Active ? 'selected' : ''}\n          onClick={() => handleFilterChange(Filters.Active)}\n        >\n          Active\n        </a>\n      </li>\n\n      <li>\n        <a\n          href=\"#/completed\"\n          className={selectedFilter === Filters.Completed ? 'selected' : ''}\n          onClick={() => handleFilterChange(Filters.Completed)}\n        >\n          Completed\n        </a>\n      </li>\n    </ul>\n  );\n};\n\nexport default TodosFilter;\n","import React from 'react';\nimport classNames from 'classnames';\n\nconst ClearCompletedButton: React.FC<ClearCompletedProps> = ({\n  completedTodosLength,\n  handleClearCompletedClick,\n}) => {\n  const clearButtonClasses = classNames({\n    'clear-completed': true,\n    hidden: completedTodosLength === 0,\n  });\n\n  return (\n    <button\n      type=\"button\"\n      className={clearButtonClasses}\n      onClick={handleClearCompletedClick}\n    >\n      Clear completed\n    </button>\n  );\n};\n\nexport default ClearCompletedButton;\n","import React from 'react';\n\nconst ToggleAll: React.FC<ToggleAllProps> = ({\n  toggleAllStatus,\n  handleToggleAllClick,\n}) => (\n  <>\n    <input\n      type=\"checkbox\"\n      data-cy=\"toggleAll\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      checked={toggleAllStatus}\n      onClick={handleToggleAllClick}\n    />\n    <label\n      htmlFor=\"toggle-all\"\n    >\n      Mark all as complete\n    </label>\n  </>\n);\n\nexport default ToggleAll;\n","export const BASE_URL = 'https://mate.academy/students-api';\n\nexport const request = async (url: string, options?: Option) => {\n  let response: Response;\n\n  if (options) {\n    response = await fetch(`${BASE_URL}${url}`, options);\n  } else {\n    response = await fetch(`${BASE_URL}${url}`);\n  }\n\n  if (!response.ok) {\n    throw new Error(`${response.status} - ${response.statusText}`);\n  }\n\n  return response.json();\n};\n\nexport const getUser = (userId: number) => {\n  return request(`/users/${userId}`);\n};\n\nexport const getUserTodos = async (userId: number) => {\n  try {\n    const userTodos = await request(`/todos/?userId=${userId}`);\n\n    return userTodos;\n  } catch {\n    return [];\n  }\n};\n\nexport const addNewTodo = async (\n  title: string,\n  userId: number,\n  completed: boolean,\n) => {\n  const options = {\n    method: 'POST',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      title,\n      userId,\n      completed,\n    }),\n  };\n\n  try {\n    const addResult\n    = await request('/todos', options);\n\n    return addResult;\n  } catch {\n    return false;\n  }\n};\n\nexport const changeTodo = async (\n  todoId: number,\n  changingFieldName: string,\n  newValue: string,\n) => {\n  const options = {\n    method: 'PATCH',\n    headers: {\n      'Content-type': 'application/json; charset=UTF-8',\n    },\n    body: JSON.stringify({\n      [changingFieldName]: newValue,\n    }),\n  };\n\n  try {\n    const editResult = await request(`/todos/${todoId}`, options);\n\n    return editResult;\n  } catch {\n    return false;\n  }\n};\n\nexport const deleteTodo = async (todoId: number) => {\n  try {\n    const deleteResult = await request(`/todos/${todoId}`, { method: 'DELETE' });\n\n    return deleteResult;\n  } catch {\n    return false;\n  }\n};\n","/* eslint-disable no-case-declarations */\n/* eslint-disable jsx-a11y/control-has-associated-label */\nimport React, { useEffect, useState } from 'react';\nimport classNames from 'classnames';\nimport Filters from './enums/enums';\nimport NewTodoForm from './components/NewTodoForm/NewTodoForm';\nimport TodoList from './components/TodoList/TodoList';\nimport TodosCounter from './components/TodosCounter/TodosCounter';\nimport TodosFilter from './components/TodosFilter/TodosFilter';\nimport ClearCompletedButton\n  from './components/ClearCompletedButton/ClearCompletedButton';\nimport ToggleAll from './components/ToggleAll/Toggle';\nimport {\n  addNewTodo, changeTodo, deleteTodo, getUser, getUserTodos,\n} from './api';\n\nconst TodoApp: React.FC = () => {\n  const [userId] = useState(3542);\n  const [todos, setTodos] = useState<Todo[]>([]);\n  const [toggleAllStatus, setToggleAllStatus] = useState(false);\n  const [currentFilter, setCurrentFilter] = useState<Filters>(Filters.All);\n  const [user, setUser] = useState('');\n  const [isErrorOccured, setIsErrorOccured] = useState(false);\n\n  const mainClasses = classNames('main', {\n    hidden: todos.length === 0,\n  });\n\n  const footerClasses = classNames('footer', {\n    hidden: todos.length === 0,\n  });\n\n  const errorClasses = classNames('error', {\n    hidden: !isErrorOccured,\n  });\n\n  const getUserName = async () => {\n    try {\n      const userFS = await getUser(userId);\n\n      setUser(userFS.name);\n    } catch {\n      setUser('User loading failed');\n    }\n  };\n\n  const getTodosFromServer = async () => {\n    const todosFS: Todo[] = await getUserTodos(userId);\n\n    setTodos([...todosFS]);\n\n    if (todosFS.length > 0) {\n      const numberOfActiveTodos = todosFS\n        .filter(todo => !todo.completed).length;\n\n      if (numberOfActiveTodos === 0) {\n        setToggleAllStatus(true);\n      }\n    } else {\n      setToggleAllStatus(false);\n    }\n  };\n\n  const handleChangeRequest = async (\n    todoId: number, changingField: string, newValue: string,\n  ) => {\n    const result = await changeTodo(todoId, changingField, newValue);\n\n    if (!result) {\n      setIsErrorOccured(true);\n\n      setTimeout(() => setIsErrorOccured(false), 3000);\n    }\n\n    return result;\n  };\n\n  const handleDeleteRequest = async (todoId: number) => {\n    const result = await deleteTodo(todoId);\n\n    if (!result) {\n      setIsErrorOccured(true);\n\n      setTimeout(() => setIsErrorOccured(false), 3000);\n    }\n\n    return result;\n  };\n\n  const editCompletedStatus = async (newStatus: boolean, todoId: number) => {\n    await handleChangeRequest(todoId, 'completed', newStatus.toString());\n\n    await getTodosFromServer();\n\n    const isAnyTodoActive = todos.find(todo => todo.completed === false);\n\n    if (!isAnyTodoActive) {\n      setToggleAllStatus(true);\n    }\n\n    if (toggleAllStatus) {\n      setToggleAllStatus(false);\n    }\n  };\n\n  const handleToggleAllClick = async () => {\n    switch (toggleAllStatus) {\n      case false:\n        const activePromises = todos.map(todo => {\n          if (!todo.completed) {\n            return handleChangeRequest(todo.id, 'completed', 'true');\n          }\n\n          return '';\n        });\n\n        await Promise.all(activePromises.filter(promise => promise !== ''));\n        break;\n\n      default:\n        const completedPromises = todos.map(todo => handleChangeRequest(\n          todo.id, 'completed', 'false',\n        ));\n\n        await Promise.all(completedPromises);\n        break;\n    }\n\n    setToggleAllStatus(prev => !prev);\n\n    getTodosFromServer();\n  };\n\n  const handleFormSubmit\n    = async (event: React.FormEvent<HTMLFormElement>, newTodoTitle: string) => {\n      event.preventDefault();\n      if (!newTodoTitle) {\n        return;\n      }\n\n      await addNewTodo(newTodoTitle, userId, false);\n\n      getTodosFromServer();\n    };\n\n  const applyFilter = (chosenFilter: string) => {\n    switch (chosenFilter) {\n      case Filters.Active:\n        setCurrentFilter(Filters.Active);\n        break;\n      case Filters.Completed:\n        setCurrentFilter(Filters.Completed);\n        break;\n      default:\n        setCurrentFilter(Filters.All);\n    }\n  };\n\n  const getVisibleTodos = () => {\n    switch (currentFilter) {\n      case 'active':\n        return todos.filter(todo => todo.completed === false);\n      case 'completed':\n        return todos.filter(todo => todo.completed === true);\n      default:\n        return todos;\n    }\n  };\n\n  const getActiveNumber = () => {\n    const activeTodos = todos.filter(todo => !todo.completed);\n\n    return activeTodos.length;\n  };\n\n  const deleteCompletedTodos = async () => {\n    const completedTodos = todos.filter(todo => todo.completed);\n\n    const completedTodosPromises = completedTodos\n      .map(todo => handleDeleteRequest(todo.id));\n\n    await Promise.all(completedTodosPromises);\n\n    getTodosFromServer();\n  };\n\n  const handleClearCompletedClick = () => {\n    deleteCompletedTodos();\n\n    const numberOfActiveTodos = getActiveNumber();\n\n    if (numberOfActiveTodos === 0) {\n      setToggleAllStatus(prev => !prev);\n    }\n  };\n\n  const getCompletedTodosLength = () => {\n    return todos.filter(todo => todo.completed).length;\n  };\n\n  const editTodoTitle = async (newTitle: string, todoId: number) => {\n    if (!newTitle) {\n      await handleDeleteRequest(todoId);\n    } else {\n      await handleChangeRequest(todoId, 'title', newTitle);\n    }\n\n    getTodosFromServer();\n  };\n\n  useEffect(() => {\n    getUserName();\n    getTodosFromServer();\n  }, []);\n\n  return (\n    <section className=\"todoapp\">\n      <div\n        className={errorClasses}\n      >\n        Something went wrong with server connection\n      </div>\n      <header className=\"header\">\n        <h1>\n          {`${user} todos`}\n        </h1>\n\n        <NewTodoForm\n          data-cy=\"createTodo\"\n          handleSubmit={handleFormSubmit}\n        />\n      </header>\n\n      <section className={mainClasses}>\n        <ToggleAll\n          toggleAllStatus={toggleAllStatus}\n          handleToggleAllClick={handleToggleAllClick}\n        />\n\n        <TodoList\n          data-cy=\"todoList\"\n          items={getVisibleTodos()}\n          editTodoTitle={editTodoTitle}\n          editCompletedStatus={editCompletedStatus}\n        />\n      </section>\n\n      <footer className={footerClasses}>\n        <TodosCounter\n          data-cy=\"todosCounter\"\n          todos={todos}\n        />\n\n        <TodosFilter\n          applyFilter={applyFilter}\n        />\n\n        <ClearCompletedButton\n          completedTodosLength={getCompletedTodosLength()}\n          handleClearCompletedClick={handleClearCompletedClick}\n        />\n      </footer>\n    </section>\n  );\n};\n\nexport default TodoApp;\n","// import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.scss';\nimport './styles/todo-list.scss';\nimport './styles/filters.scss';\n\nimport TodoApp from './TodoApp';\n\nReactDOM.render(\n  <TodoApp />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}